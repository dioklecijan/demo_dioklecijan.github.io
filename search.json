[{"title":"Closure in constructor","url":"/2018/04/20/Closure-in-constructor/","content":"\n> Closure in constructor is bad idea.\n\nPeople with the experience in classical OOP languages like C++ or Java usually\ntry to map OOP patterns in JavaScript. With this approach one of the most\nimportant JavaScript concepts - the way how objects inherit features from one\nanother - is ignored. Partly because it involves weird syntax\nand partly because same functionality can be achieved with the familiar constructs.\n\nTake a look at this physically encapsulated, easy to read and easy to understand OOP-like code:\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n\n  this.volume = function() {\n    return this.width * this.height * this.depth;\n  };\n}\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nWhen JavaScript closures are mastered, the code looks like:\n\n```js\nfunction Brick(w, h, d) {\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nThe correct way to write above functionality is to define `volume` method using\nprototype property.\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nThere are at least two reasons for that:\n\n1.  Methods defined via prototype property can be inherited.\n2.  Methods defined via prototype property are shared between created instances.\n\nI wrote simple test to compare memory usage when using closure in constructor\nand when using prototype.\n\n\n| Number of created bricks | With closure in constructor | With prototype |\n| ------------------------ | --------------------------- | -------------- |\n| 1000                     | 4.37 MB                     | 4.25 MB        |\n| 10 000                   | 5.83 MB                     | 4.36 MB        |\n| 100 000                  | 19.34 MB                    | 4.36 MB        |\n\n\nThese results are produces on MacBook Pro (Retina, 15-inch, Mid 2015),\nMacOS 10.13.4, 2.5 GHz Intel Core i7, 16 GB 1600 MHz DDR3 using NodeJs v9.1.0\n\n`closure.js`\n\n```js\nfunction Brick(w, h, d) {\n  // closure in constructor\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n```\n\n`prototype.js`\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n```\n\n`bash commands`\n\n```bash\n>  node closure.js 1000\nThe script uses approximately 4.37 MB\n\n>  node closure.js 10000\nThe script uses approximately 5.83 MB\n\n>  node closure.js 100000\nThe script uses approximately 19.34 MB\n\n>  node prototype.js 1000\nThe script uses approximately 4.25 MB\n\n>  node prototype.js 10000\nThe script uses approximately 4.36 MB\n\n>  node prototype.js 100000\nThe script uses approximately 4.36 MB\n```\n","tags":["Javascript bites"]},{"title":"Hello World","url":"/2018/04/18/hello-world/","content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post.\nCheck [documentation](https://hexo.io/docs/) for more info.\nIf you get any problems when using Hexo, you can find the\nanswer in [troubleshooting](https://hexo.io/docs/troubleshooting.html)\nor you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]