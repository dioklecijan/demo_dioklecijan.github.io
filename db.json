{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-aircloud/source/css/aircloud-mg.css","path":"css/aircloud-mg.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-aircloud/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-aircloud/_config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891577},{"_id":"themes/hexo-theme-aircloud/.gitignore","hash":"273ebf9d5c8a84679b3b61f163cf0d6e7cd5eb97","modified":1524091891577},{"_id":"themes/hexo-theme-aircloud/readme-en.md","hash":"c2702b54a9578fa31b5ec63b6f0af408d1cfacb6","modified":1524091891582},{"_id":"themes/hexo-theme-aircloud/readme.md","hash":"abd82b6e260d1a0d8804ff06cc1a591e88da28eb","modified":1524091891582},{"_id":"themes/hexo-theme-aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891580},{"_id":"themes/hexo-theme-aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891581},{"_id":"source/_posts/Closure-in-constructor.md","hash":"c7e35c7fbc568d22f3ff344da9bf064c1fd72f78","modified":1524179596092},{"_id":"source/_posts/hello-world.md","hash":"0498138ab3e7135e479e62715cd61f59ef02f1ae","modified":1524177958437},{"_id":"source/gists/closure.js","hash":"ea74fa7178105efed4c00fb04b45bae0d475258c","modified":1524175755797},{"_id":"source/gists/prototype.js","hash":"6999f718845b845a67a8be983787e5b35ffa14a2","modified":1524175767464},{"_id":"source/gists/scope.js","hash":"7b208b2966d42156f1319aacf8de1b4398f4eec0","modified":1524169456719},{"_id":"themes/hexo-theme-aircloud/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1524091891578},{"_id":"themes/hexo-theme-aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1524091891579},{"_id":"themes/hexo-theme-aircloud/layout/about.ejs","hash":"fc2a99a48ae2b85bb2002a398bff7c76799ed190","modified":1524091891580},{"_id":"themes/hexo-theme-aircloud/layout/archive.ejs","hash":"4fd37643dd1fc8d474b773ec5f365634078fd175","modified":1524091891580},{"_id":"themes/hexo-theme-aircloud/layout/index.ejs","hash":"a4ebf04c9fef0e3837c005e8e2c92902fe7c47f8","modified":1524091891581},{"_id":"themes/hexo-theme-aircloud/layout/layout.ejs","hash":"8be3f44e68550b9ba7550052bcf4d342df15b67f","modified":1524096739430},{"_id":"themes/hexo-theme-aircloud/layout/post.ejs","hash":"e339b35d452367c24848ca498995f3b85305bc0e","modified":1524091891581},{"_id":"themes/hexo-theme-aircloud/layout/tags.ejs","hash":"21990104ff12deafa1b5d25593180bb838358ec3","modified":1524091891581},{"_id":"themes/hexo-theme-aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891583},{"_id":"themes/hexo-theme-aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891583},{"_id":"themes/hexo-theme-aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891584},{"_id":"themes/hexo-theme-aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891584},{"_id":"themes/hexo-theme-aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891590},{"_id":"themes/hexo-theme-aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891590},{"_id":"themes/hexo-theme-aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891592},{"_id":"themes/hexo-theme-aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524091891592},{"_id":"themes/hexo-theme-aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1524091891579},{"_id":"themes/hexo-theme-aircloud/layout/_partial/footer.ejs","hash":"6658070617f3219b1d433c75ffe9aca54001c2d5","modified":1524124353587},{"_id":"themes/hexo-theme-aircloud/layout/_partial/head.ejs","hash":"3f18d5d4951a205bab25b08d6bf85b054c84a21b","modified":1524091891579},{"_id":"themes/hexo-theme-aircloud/layout/_partial/nav.ejs","hash":"dcbaa0ff2b3cd2be562a65803865fb4a37488cec","modified":1524091891579},{"_id":"themes/hexo-theme-aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1524091891580},{"_id":"themes/hexo-theme-aircloud/source/_less/archive.css","hash":"905efcc06a62d1e8b60df0e12434afa353378d3a","modified":1524091891583},{"_id":"themes/hexo-theme-aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1524091891583},{"_id":"themes/hexo-theme-aircloud/source/_less/common.css","hash":"2aafc2b3741843d6b0d859de48468d43b27504a1","modified":1524179798919},{"_id":"themes/hexo-theme-aircloud/source/_less/common.less","hash":"d76e0ccaf95245e5cf8e9c3a994f4837bb36e040","modified":1524179823348},{"_id":"themes/hexo-theme-aircloud/source/_less/donate.css","hash":"ae6a676a42321512f0536c5230bb53084aaf2c2f","modified":1524091891585},{"_id":"themes/hexo-theme-aircloud/source/_less/donate.less","hash":"d63139f4aa148bf894afa5c1007a4398696a0e4c","modified":1524091891585},{"_id":"themes/hexo-theme-aircloud/source/_less/hightlight.css","hash":"87402a61caaf7cdb5da26827b79f8609b00b8ceb","modified":1524179848011},{"_id":"themes/hexo-theme-aircloud/source/_less/hightlight.less","hash":"87402a61caaf7cdb5da26827b79f8609b00b8ceb","modified":1524179859768},{"_id":"themes/hexo-theme-aircloud/source/_less/index.css","hash":"52fe4d1b93dfb4c9c9d63e24862354b6a0ef47f8","modified":1524091891587},{"_id":"themes/hexo-theme-aircloud/source/_less/layout.css","hash":"ac2c2a0f98adc5159be84699ac2eaef1a4195fb6","modified":1524179870742},{"_id":"themes/hexo-theme-aircloud/source/_less/index.less","hash":"502d689e3568056cc27dd4da7da2499b0be4253e","modified":1524091891588},{"_id":"themes/hexo-theme-aircloud/source/_less/layout.less","hash":"662bbbfbbcaf0b266114b8b86baef3c846b6da20","modified":1524096584460},{"_id":"themes/hexo-theme-aircloud/source/_less/nav.css","hash":"1b873b753d04acb2da18189dd0012e74adb13810","modified":1524094029474},{"_id":"themes/hexo-theme-aircloud/source/_less/nav.less","hash":"992442a05579ab9ebc92f96ad2e83bb70bb2c999","modified":1524094027370},{"_id":"themes/hexo-theme-aircloud/source/_less/post.css","hash":"13a96419dde0e1110143c86846b7b4d1922d782e","modified":1524180801782},{"_id":"themes/hexo-theme-aircloud/source/_less/post.less","hash":"40eea4a5bc6f5d73aa1757374b0c1fe08f61ddec","modified":1524180639515},{"_id":"themes/hexo-theme-aircloud/source/_less/tag.css","hash":"3250887aaae0bc62bd82082d000ce3de8cc55ab6","modified":1524091891592},{"_id":"themes/hexo-theme-aircloud/source/_less/tag.less","hash":"47e1ce2f55e2b62beefd0f69dfe7deb594e7b309","modified":1524091891592},{"_id":"themes/hexo-theme-aircloud/source/_less/toc.css","hash":"8da4a74b0979052a11b31ceff26e24bb51ea6bcc","modified":1524093939338},{"_id":"themes/hexo-theme-aircloud/source/_less/toc.less","hash":"4f38200a05277a86f6dd2276e64c2df79bad2c89","modified":1524091891593},{"_id":"themes/hexo-theme-aircloud/source/_less/variables.css","hash":"9768d38beea904c4febc704192a49c8f7ae6e06c","modified":1524091891593},{"_id":"themes/hexo-theme-aircloud/source/_less/variables.less","hash":"48cb0963ba453088caea7e5284a84dfee210fcfd","modified":1524177340435},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud-mg.css","hash":"97c49ff9944e2517bdbf649488416655efd9a01a","modified":1524180149655},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.css","hash":"6d7d8905629c7870559d83e4ec045ddc8fb586b1","modified":1524180737565},{"_id":"themes/hexo-theme-aircloud/source/css/aircloud.less","hash":"831e0d6b52ba556c21a6f85607e54acf9f99f848","modified":1524091891594},{"_id":"themes/hexo-theme-aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1524091891595},{"_id":"themes/hexo-theme-aircloud/source/js/index.js","hash":"8f0a72c0dadf593680046994d508b30b2d82f117","modified":1524091891596},{"_id":"themes/hexo-theme-aircloud/source/_less/_partial/footer.css","hash":"e84340aaa76f8eb303ea2fbcc7d1a49ab024f16b","modified":1524091891583},{"_id":"themes/hexo-theme-aircloud/source/_less/_partial/footer.less","hash":"52fc05828f77d9a5a65eb0aca37edc22463d885f","modified":1524091891583},{"_id":"themes/hexo-theme-aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1524091891596}],"Category":[],"Data":[],"Page":[{"_content":"// Closure\n\nfunction a() {\n  let a1 = 1;\n  function b() {\n    let b1 = 2;\n    function c() {\n      return b1 + a1;\n    }\n    return c();\n  }\n  return b();\n}\n\nconsole.log(a());\n\n// // Prototype\n\n// function Brick(w, h, d) {\n//   this.width = w;\n//   this.height = h;\n//   this.depth = d;\n//   // closure defined in constructor, can access private vars\n//   // in outer scope\n//   this.volume = function() {\n//     function dx() {\n//       return d;\n//     }\n//     return w * h * dx();\n//   };\n// }\n\n// Brick.hr = function() {\n//   return 'cigla';\n// };\n\n// let brick = new Brick(10, 5, 2);\n\n// // defined at any type, can be changed after definition\n// // has public scope\n// Brick.prototype.area = function() {\n//   return this.width * this.height;\n// };\n\n// console.log(brick);\n// console.log(brick.area());\n// console.log(brick.volume());\n// console.log(Brick.hr()); // you can't brick.hr()\n","source":"gists/scope.js","raw":"// Closure\n\nfunction a() {\n  let a1 = 1;\n  function b() {\n    let b1 = 2;\n    function c() {\n      return b1 + a1;\n    }\n    return c();\n  }\n  return b();\n}\n\nconsole.log(a());\n\n// // Prototype\n\n// function Brick(w, h, d) {\n//   this.width = w;\n//   this.height = h;\n//   this.depth = d;\n//   // closure defined in constructor, can access private vars\n//   // in outer scope\n//   this.volume = function() {\n//     function dx() {\n//       return d;\n//     }\n//     return w * h * dx();\n//   };\n// }\n\n// Brick.hr = function() {\n//   return 'cigla';\n// };\n\n// let brick = new Brick(10, 5, 2);\n\n// // defined at any type, can be changed after definition\n// // has public scope\n// Brick.prototype.area = function() {\n//   return this.width * this.height;\n// };\n\n// console.log(brick);\n// console.log(brick.area());\n// console.log(brick.volume());\n// console.log(Brick.hr()); // you can't brick.hr()\n","date":"2018-04-19T20:24:16.719Z","updated":"2018-04-19T20:24:16.719Z","path":"gists/scope.js","layout":"false","title":"","comments":1,"_id":"cjgbb93gf00017v6d0anrm8zg","content":"// Closure\n\nfunction a() {\n  let a1 = 1;\n  function b() {\n    let b1 = 2;\n    function c() {\n      return b1 + a1;\n    }\n    return c();\n  }\n  return b();\n}\n\nconsole.log(a());\n\n// // Prototype\n\n// function Brick(w, h, d) {\n//   this.width = w;\n//   this.height = h;\n//   this.depth = d;\n//   // closure defined in constructor, can access private vars\n//   // in outer scope\n//   this.volume = function() {\n//     function dx() {\n//       return d;\n//     }\n//     return w * h * dx();\n//   };\n// }\n\n// Brick.hr = function() {\n//   return 'cigla';\n// };\n\n// let brick = new Brick(10, 5, 2);\n\n// // defined at any type, can be changed after definition\n// // has public scope\n// Brick.prototype.area = function() {\n//   return this.width * this.height;\n// };\n\n// console.log(brick);\n// console.log(brick.area());\n// console.log(brick.volume());\n// console.log(Brick.hr()); // you can't brick.hr()\n","site":{"data":{}},"excerpt":"","more":"// Closure\n\nfunction a() {\n  let a1 = 1;\n  function b() {\n    let b1 = 2;\n    function c() {\n      return b1 + a1;\n    }\n    return c();\n  }\n  return b();\n}\n\nconsole.log(a());\n\n// // Prototype\n\n// function Brick(w, h, d) {\n//   this.width = w;\n//   this.height = h;\n//   this.depth = d;\n//   // closure defined in constructor, can access private vars\n//   // in outer scope\n//   this.volume = function() {\n//     function dx() {\n//       return d;\n//     }\n//     return w * h * dx();\n//   };\n// }\n\n// Brick.hr = function() {\n//   return 'cigla';\n// };\n\n// let brick = new Brick(10, 5, 2);\n\n// // defined at any type, can be changed after definition\n// // has public scope\n// Brick.prototype.area = function() {\n//   return this.width * this.height;\n// };\n\n// console.log(brick);\n// console.log(brick.area());\n// console.log(brick.volume());\n// console.log(Brick.hr()); // you can't brick.hr()\n"},{"_content":"function Brick(w, h, d) {\n  // closure in constructor\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n","source":"gists/closure.js","raw":"function Brick(w, h, d) {\n  // closure in constructor\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n","date":"2018-04-19T22:09:15.797Z","updated":"2018-04-19T22:09:15.797Z","path":"gists/closure.js","layout":"false","title":"","comments":1,"_id":"cjgbb93gh00037v6d7owuabto","content":"function Brick(w, h, d) {\n  // closure in constructor\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n","site":{"data":{}},"excerpt":"","more":"function Brick(w, h, d) {\n  // closure in constructor\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n"},{"_content":"function Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n","source":"gists/prototype.js","raw":"function Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n","date":"2018-04-19T22:09:27.464Z","updated":"2018-04-19T22:09:27.464Z","path":"gists/prototype.js","layout":"false","title":"","comments":1,"_id":"cjgbb93gj00047v6djw3i151o","content":"function Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n","site":{"data":{}},"excerpt":"","more":"function Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n"}],"Post":[{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post.\nCheck [documentation](https://hexo.io/docs/) for more info.\nIf you get any problems when using Hexo, you can find the\nanswer in [troubleshooting](https://hexo.io/docs/troubleshooting.html)\nor you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post.\nCheck [documentation](https://hexo.io/docs/) for more info.\nIf you get any problems when using Hexo, you can find the\nanswer in [troubleshooting](https://hexo.io/docs/troubleshooting.html)\nor you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-04-18T21:58:53.580Z","updated":"2018-04-19T22:45:58.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgbb93gc00007v6dxhea6m1p","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post.\nCheck <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info.\nIf you get any problems when using Hexo, you can find the\nanswer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a>\nor you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post.\nCheck <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info.\nIf you get any problems when using Hexo, you can find the\nanswer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a>\nor you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Closure in constructor","date":"2018-04-19T22:40:13.000Z","_content":"\n> Closure in constructor is bad idea.\n\nPeople with the experience in classical OOP languages like C++ or Java usually\ntry to map OOP patterns in JavaScript. With this approach one of the most\nimportant JavaScript concepts - the way how objects inherit features from one\nanother - is ignored. Partly because it involves weird syntax\nand partly because same functionality can be achieved with the familiar constructs.\n\nTake a look at this physically encapsulated, easy to read and easy to understand OOP-like code:\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n\n  this.volume = function() {\n    return this.width * this.height * this.depth;\n  };\n}\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nWhen JavaScript closures are mastered, the code looks like:\n\n```js\nfunction Brick(w, h, d) {\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nThe correct way to write above functionality is to define `volume` method using\nprototype property.\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nThere are at least two reasons for that:\n\n1.  Methods defined via prototype property can be inherited.\n2.  Methods defined via prototype property are shared between created instances.\n\nI wrote simple test to compare memory usage when using closure in constructor\nand when using prototype.\n\n\n| Number of created bricks | With closure in constructor | With prototype |\n| ------------------------ | --------------------------- | -------------- |\n| 1000                     | 4.37 MB                     | 4.25 MB        |\n| 10 000                   | 5.83 MB                     | 4.36 MB        |\n| 100 000                  | 19.34 MB                    | 4.36 MB        |\n\n\nThese results are produces on MacBook Pro (Retina, 15-inch, Mid 2015),\nMacOS 10.13.4, 2.5 GHz Intel Core i7, 16 GB 1600 MHz DDR3 using NodeJs v9.1.0\n\n`closure.js`\n\n```js\nfunction Brick(w, h, d) {\n  // closure in constructor\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n```\n\n`prototype.js`\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n```\n\n`bash commands`\n\n```bash\n>  node closure.js 1000\nThe script uses approximately 4.37 MB\n\n>  node closure.js 10000\nThe script uses approximately 5.83 MB\n\n>  node closure.js 100000\nThe script uses approximately 19.34 MB\n\n>  node prototype.js 1000\nThe script uses approximately 4.25 MB\n\n>  node prototype.js 10000\nThe script uses approximately 4.36 MB\n\n>  node prototype.js 100000\nThe script uses approximately 4.36 MB\n```\n","source":"_posts/Closure-in-constructor.md","raw":"---\ntitle: Closure in constructor\ntags: ['Javascript bites']\ndate: 2018-04-20 00:40:13\n---\n\n> Closure in constructor is bad idea.\n\nPeople with the experience in classical OOP languages like C++ or Java usually\ntry to map OOP patterns in JavaScript. With this approach one of the most\nimportant JavaScript concepts - the way how objects inherit features from one\nanother - is ignored. Partly because it involves weird syntax\nand partly because same functionality can be achieved with the familiar constructs.\n\nTake a look at this physically encapsulated, easy to read and easy to understand OOP-like code:\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n\n  this.volume = function() {\n    return this.width * this.height * this.depth;\n  };\n}\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nWhen JavaScript closures are mastered, the code looks like:\n\n```js\nfunction Brick(w, h, d) {\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nThe correct way to write above functionality is to define `volume` method using\nprototype property.\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\nconsole.log(new Brick(10, 5, 2).volume()); // prints 100\n```\n\nThere are at least two reasons for that:\n\n1.  Methods defined via prototype property can be inherited.\n2.  Methods defined via prototype property are shared between created instances.\n\nI wrote simple test to compare memory usage when using closure in constructor\nand when using prototype.\n\n\n| Number of created bricks | With closure in constructor | With prototype |\n| ------------------------ | --------------------------- | -------------- |\n| 1000                     | 4.37 MB                     | 4.25 MB        |\n| 10 000                   | 5.83 MB                     | 4.36 MB        |\n| 100 000                  | 19.34 MB                    | 4.36 MB        |\n\n\nThese results are produces on MacBook Pro (Retina, 15-inch, Mid 2015),\nMacOS 10.13.4, 2.5 GHz Intel Core i7, 16 GB 1600 MHz DDR3 using NodeJs v9.1.0\n\n`closure.js`\n\n```js\nfunction Brick(w, h, d) {\n  // closure in constructor\n  this.volume = function() {\n    return w * h * d;\n  };\n}\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n```\n\n`prototype.js`\n\n```js\nfunction Brick(w, h, d) {\n  this.width = w;\n  this.height = h;\n  this.depth = d;\n}\n\nBrick.prototype.volume = function() {\n  return this.width * this.height * this.depth;\n};\n\n// allocation\nlet size = process.argv[2] || 0;\nfor (let index = 0; index < size; index++) {\n  new Brick(index, index, index).volume();\n}\n\n// mem usage\nconst used = process.memoryUsage().heapUsed / 1024 / 1024;\nconsole.log(`The script uses approximately ${Math.round(used * 100) / 100} MB`);\n```\n\n`bash commands`\n\n```bash\n>  node closure.js 1000\nThe script uses approximately 4.37 MB\n\n>  node closure.js 10000\nThe script uses approximately 5.83 MB\n\n>  node closure.js 100000\nThe script uses approximately 19.34 MB\n\n>  node prototype.js 1000\nThe script uses approximately 4.25 MB\n\n>  node prototype.js 10000\nThe script uses approximately 4.36 MB\n\n>  node prototype.js 100000\nThe script uses approximately 4.36 MB\n```\n","slug":"Closure-in-constructor","published":1,"updated":"2018-04-19T23:13:16.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgbb93gg00027v6dso4jvf62","content":"<blockquote>\n<p>Closure in constructor is bad idea.</p>\n</blockquote>\n<p>People with the experience in classical OOP languages like C++ or Java usually\ntry to map OOP patterns in JavaScript. With this approach one of the most\nimportant JavaScript concepts - the way how objects inherit features from one\nanother - is ignored. Partly because it involves weird syntax\nand partly because same functionality can be achieved with the familiar constructs.</p>\n<p>Take a look at this physically encapsulated, easy to read and easy to understand OOP-like code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = w;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = h;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.depth = d;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.depth;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Brick(<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>).volume()); <span class=\"comment\">// prints 100</span></span><br></pre></td></tr></table></figure>\n<p>When JavaScript closures are mastered, the code looks like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w * h * d;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Brick(<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>).volume()); <span class=\"comment\">// prints 100</span></span><br></pre></td></tr></table></figure>\n<p>The correct way to write above functionality is to define <code>volume</code> method using\nprototype property.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = w;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = h;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.depth = d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Brick.prototype.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.depth;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Brick(<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>).volume()); <span class=\"comment\">// prints 100</span></span><br></pre></td></tr></table></figure>\n<p>There are at least two reasons for that:</p>\n<ol>\n<li>Methods defined via prototype property can be inherited.</li>\n<li>Methods defined via prototype property are shared between created instances.</li>\n</ol>\n<p>I wrote simple test to compare memory usage when using closure in constructor\nand when using prototype.</p>\n<table>\n<thead>\n<tr>\n<th>Number of created bricks</th>\n<th>With closure in constructor</th>\n<th>With prototype</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1000</td>\n<td>4.37 MB</td>\n<td>4.25 MB</td>\n</tr>\n<tr>\n<td>10 000</td>\n<td>5.83 MB</td>\n<td>4.36 MB</td>\n</tr>\n<tr>\n<td>100 000</td>\n<td>19.34 MB</td>\n<td>4.36 MB</td>\n</tr>\n</tbody>\n</table>\n<p>These results are produces on MacBook Pro (Retina, 15-inch, Mid 2015),\nMacOS 10.13.4, 2.5 GHz Intel Core i7, 16 GB 1600 MHz DDR3 using NodeJs v9.1.0</p>\n<p><code>closure.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// closure in constructor</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w * h * d;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allocation</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> size = process.argv[<span class=\"number\">2</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; size; index++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Brick(index, index, index).volume();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mem usage</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> used = process.memoryUsage().heapUsed / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The script uses approximately <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.round(used * <span class=\"number\">100</span>) <span class=\"regexp\">/ 100&#125; MB`);</span></span></span></span><br></pre></td></tr></table></figure>\n<p><code>prototype.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = w;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = h;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.depth = d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Brick.prototype.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.depth;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allocation</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> size = process.argv[<span class=\"number\">2</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; size; index++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Brick(index, index, index).volume();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mem usage</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> used = process.memoryUsage().heapUsed / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The script uses approximately <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.round(used * <span class=\"number\">100</span>) <span class=\"regexp\">/ 100&#125; MB`);</span></span></span></span><br></pre></td></tr></table></figure>\n<p><code>bash commands</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  node closure.js 1000</span><br><span class=\"line\">The script uses approximately 4.37 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node closure.js 10000</span><br><span class=\"line\">The script uses approximately 5.83 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node closure.js 100000</span><br><span class=\"line\">The script uses approximately 19.34 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node prototype.js 1000</span><br><span class=\"line\">The script uses approximately 4.25 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node prototype.js 10000</span><br><span class=\"line\">The script uses approximately 4.36 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node prototype.js 100000</span><br><span class=\"line\">The script uses approximately 4.36 MB</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Closure in constructor is bad idea.</p>\n</blockquote>\n<p>People with the experience in classical OOP languages like C++ or Java usually\ntry to map OOP patterns in JavaScript. With this approach one of the most\nimportant JavaScript concepts - the way how objects inherit features from one\nanother - is ignored. Partly because it involves weird syntax\nand partly because same functionality can be achieved with the familiar constructs.</p>\n<p>Take a look at this physically encapsulated, easy to read and easy to understand OOP-like code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = w;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = h;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.depth = d;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.depth;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Brick(<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>).volume()); <span class=\"comment\">// prints 100</span></span><br></pre></td></tr></table></figure>\n<p>When JavaScript closures are mastered, the code looks like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w * h * d;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Brick(<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>).volume()); <span class=\"comment\">// prints 100</span></span><br></pre></td></tr></table></figure>\n<p>The correct way to write above functionality is to define <code>volume</code> method using\nprototype property.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = w;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = h;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.depth = d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Brick.prototype.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.depth;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Brick(<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>).volume()); <span class=\"comment\">// prints 100</span></span><br></pre></td></tr></table></figure>\n<p>There are at least two reasons for that:</p>\n<ol>\n<li>Methods defined via prototype property can be inherited.</li>\n<li>Methods defined via prototype property are shared between created instances.</li>\n</ol>\n<p>I wrote simple test to compare memory usage when using closure in constructor\nand when using prototype.</p>\n<table>\n<thead>\n<tr>\n<th>Number of created bricks</th>\n<th>With closure in constructor</th>\n<th>With prototype</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1000</td>\n<td>4.37 MB</td>\n<td>4.25 MB</td>\n</tr>\n<tr>\n<td>10 000</td>\n<td>5.83 MB</td>\n<td>4.36 MB</td>\n</tr>\n<tr>\n<td>100 000</td>\n<td>19.34 MB</td>\n<td>4.36 MB</td>\n</tr>\n</tbody>\n</table>\n<p>These results are produces on MacBook Pro (Retina, 15-inch, Mid 2015),\nMacOS 10.13.4, 2.5 GHz Intel Core i7, 16 GB 1600 MHz DDR3 using NodeJs v9.1.0</p>\n<p><code>closure.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// closure in constructor</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> w * h * d;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allocation</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> size = process.argv[<span class=\"number\">2</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; size; index++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Brick(index, index, index).volume();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mem usage</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> used = process.memoryUsage().heapUsed / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The script uses approximately <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.round(used * <span class=\"number\">100</span>) <span class=\"regexp\">/ 100&#125; MB`);</span></span></span></span><br></pre></td></tr></table></figure>\n<p><code>prototype.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Brick</span>(<span class=\"params\">w, h, d</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.width = w;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.height = h;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.depth = d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Brick.prototype.volume = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.depth;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// allocation</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> size = process.argv[<span class=\"number\">2</span>] || <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; size; index++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Brick(index, index, index).volume();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mem usage</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> used = process.memoryUsage().heapUsed / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`The script uses approximately <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.round(used * <span class=\"number\">100</span>) <span class=\"regexp\">/ 100&#125; MB`);</span></span></span></span><br></pre></td></tr></table></figure>\n<p><code>bash commands</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  node closure.js 1000</span><br><span class=\"line\">The script uses approximately 4.37 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node closure.js 10000</span><br><span class=\"line\">The script uses approximately 5.83 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node closure.js 100000</span><br><span class=\"line\">The script uses approximately 19.34 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node prototype.js 1000</span><br><span class=\"line\">The script uses approximately 4.25 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node prototype.js 10000</span><br><span class=\"line\">The script uses approximately 4.36 MB</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;  node prototype.js 100000</span><br><span class=\"line\">The script uses approximately 4.36 MB</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgbb93gg00027v6dso4jvf62","tag_id":"cjgbb93gj00057v6da6oiz6ya","_id":"cjgbb93gl00067v6daq9ia7c4"}],"Tag":[{"name":"Javascript bites","_id":"cjgbb93gj00057v6da6oiz6ya"}]}}